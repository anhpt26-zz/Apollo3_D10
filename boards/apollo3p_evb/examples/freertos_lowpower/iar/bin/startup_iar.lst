###############################################################################
#
# IAR ANSI C/C++ Compiler V8.50.6.265/W32 for ARM         07/Jul/2021  16:12:35
# Copyright 1999-2020 IAR Systems AB.
#
#    Cpu mode             
#    Endian            =  little
#    Source file       =
#        X:\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_lowpower\iar\startup_iar.c
#    Command line      =
#        -f C:\Users\ADMINI~1\AppData\Local\Temp\EWCEAC.tmp
#        (X:\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_lowpower\iar\startup_iar.c
#        -D iar -D AM_PART_APOLLO3P -D AM_DEBUG_PRINTF -D AM_FREERTOS -D
#        AM_PACKAGE_BGA -D AM_UTIL_FAULTISR_PRINT -lcN
#        X:\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_lowpower\iar\bin
#        --diag_suppress Pa050 -o
#        X:\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_lowpower\iar\bin
#        --debug --endian=little --cpu=Cortex-M4 --no_path_in_file_macros -e
#        --fpu=VFPv4_sp --dlib_config "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.4\arm\inc\c\DLib_Config_Normal.h" -I
#        X:\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_lowpower\iar\..\..\..\..\..\third_party\FreeRTOSv10.1.1\Source\portable\IAR\AMapollo2\\
#        -I
#        X:\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_lowpower\iar\..\src\\
#        -I
#        X:\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_lowpower\iar\..\..\..\..\..\\
#        -I
#        X:\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_lowpower\iar\..\..\..\..\..\CMSIS\ARM\Include\\
#        -I
#        X:\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_lowpower\iar\..\..\..\..\..\CMSIS\AmbiqMicro\Include\\
#        -I
#        X:\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_lowpower\iar\..\..\..\bsp\\
#        -I
#        X:\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_lowpower\iar\..\..\..\..\..\mcu\apollo3p\\
#        -I
#        X:\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_lowpower\iar\..\..\..\..\..\devices\\
#        -I
#        X:\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_lowpower\iar\..\..\..\..\..\utils\\
#        -I
#        X:\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_lowpower\iar\..\..\..\..\..\third_party\FreeRTOSv10.1.1\Source\include\\
#        -Ohs --no_size_constraints)
#    Locale            =  C
#    List file         =
#        X:\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_lowpower\iar\bin\startup_iar.lst
#    Object file       =
#        X:\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_lowpower\iar\bin\startup_iar.o
#    Runtime model:       
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#
###############################################################################

X:\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_lowpower\iar\startup_iar.c
      1          //*****************************************************************************
      2          //
      3          //! @file startup_iar.c
      4          //!
      5          //! @brief Definitions for interrupt handlers, the vector table, and the stack.
      6          //
      7          //*****************************************************************************
      8          
      9          //*****************************************************************************
     10          //
     11          // Copyright (c) 2020, Ambiq Micro, Inc.
     12          // All rights reserved.
     13          //
     14          // Redistribution and use in source and binary forms, with or without
     15          // modification, are permitted provided that the following conditions are met:
     16          //
     17          // 1. Redistributions of source code must retain the above copyright notice,
     18          // this list of conditions and the following disclaimer.
     19          //
     20          // 2. Redistributions in binary form must reproduce the above copyright
     21          // notice, this list of conditions and the following disclaimer in the
     22          // documentation and/or other materials provided with the distribution.
     23          //
     24          // 3. Neither the name of the copyright holder nor the names of its
     25          // contributors may be used to endorse or promote products derived from this
     26          // software without specific prior written permission.
     27          //
     28          // Third party software included in this distribution is subject to the
     29          // additional license terms as defined in the /docs/licenses directory.
     30          //
     31          // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     32          // AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     33          // IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
     34          // ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
     35          // LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
     36          // CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
     37          // SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
     38          // INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
     39          // CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
     40          // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
     41          // POSSIBILITY OF SUCH DAMAGE.
     42          //
     43          // This is part of revision 2.5.1 of the AmbiqSuite Development Package.
     44          //
     45          //*****************************************************************************
     46          
     47          #include <stdint.h>
     48          
     49          //*****************************************************************************
     50          //
     51          // Enable the IAR extensions for this source file.
     52          //
     53          //*****************************************************************************
     54          #pragma language = extended
     55          
     56          //*****************************************************************************
     57          //
     58          // Weak function links.
     59          //
     60          //*****************************************************************************
     61          #pragma weak MemManage_Handler      = HardFault_Handler
     62          #pragma weak BusFault_Handler       = HardFault_Handler
     63          #pragma weak UsageFault_Handler     = HardFault_Handler
     64          #pragma weak SecureFault_Handler    = HardFault_Handler
     65          #pragma weak SVC_Handler            = am_default_isr
     66          #pragma weak DebugMon_Handler       = am_default_isr
     67          #pragma weak PendSV_Handler         = am_default_isr
     68          #pragma weak SysTick_Handler        = am_default_isr
     69          
     70          #pragma weak am_brownout_isr        = am_default_isr
     71          #pragma weak am_watchdog_isr        = am_default_isr
     72          #pragma weak am_rtc_isr             = am_default_isr
     73          #pragma weak am_vcomp_isr           = am_default_isr
     74          #pragma weak am_ioslave_ios_isr     = am_default_isr
     75          #pragma weak am_ioslave_acc_isr     = am_default_isr
     76          #pragma weak am_iomaster0_isr       = am_default_isr
     77          #pragma weak am_iomaster1_isr       = am_default_isr
     78          #pragma weak am_iomaster2_isr       = am_default_isr
     79          #pragma weak am_iomaster3_isr       = am_default_isr
     80          #pragma weak am_iomaster4_isr       = am_default_isr
     81          #pragma weak am_iomaster5_isr       = am_default_isr
     82          #pragma weak am_ble_isr             = am_default_isr
     83          #pragma weak am_gpio_isr            = am_default_isr
     84          #pragma weak am_ctimer_isr          = am_default_isr
     85          #pragma weak am_uart_isr            = am_default_isr
     86          #pragma weak am_uart1_isr           = am_default_isr
     87          #pragma weak am_scard_isr           = am_default_isr
     88          #pragma weak am_adc_isr             = am_default_isr
     89          #pragma weak am_pdm0_isr            = am_default_isr
     90          #pragma weak am_mspi0_isr           = am_default_isr
     91          #pragma weak am_software0_isr       = am_default_isr
     92          #pragma weak am_stimer_isr          = am_default_isr
     93          #pragma weak am_stimer_cmpr0_isr    = am_default_isr
     94          #pragma weak am_stimer_cmpr1_isr    = am_default_isr
     95          #pragma weak am_stimer_cmpr2_isr    = am_default_isr
     96          #pragma weak am_stimer_cmpr3_isr    = am_default_isr
     97          #pragma weak am_stimer_cmpr4_isr    = am_default_isr
     98          #pragma weak am_stimer_cmpr5_isr    = am_default_isr
     99          #pragma weak am_stimer_cmpr6_isr    = am_default_isr
    100          #pragma weak am_stimer_cmpr7_isr    = am_default_isr
    101          #pragma weak am_flash_isr           = am_default_isr
    102          #pragma weak am_clkgen_isr          = am_default_isr
    103          #pragma weak am_mspi1_isr           = am_default_isr
    104          #pragma weak am_mspi2_isr           = am_default_isr
    105          
    106          
    107          //*****************************************************************************
    108          //
    109          // Forward declaration of the default fault handlers.
    110          //
    111          //*****************************************************************************
    112          extern __stackless void Reset_Handler(void);
    113          extern __weak void NMI_Handler(void);
    114          extern __weak void HardFault_Handler(void);
    115          extern        void MemManage_Handler(void);
    116          extern        void BusFault_Handler(void);
    117          extern        void UsageFault_Handler(void);
    118          extern        void SecureFault_Handler(void);
    119          extern        void SVC_Handler(void);
    120          extern        void DebugMon_Handler(void);
    121          extern        void PendSV_Handler(void);
    122          extern        void SysTick_Handler(void);
    123          
    124          extern void am_brownout_isr(void);
    125          extern void am_watchdog_isr(void);
    126          extern void am_rtc_isr(void);
    127          extern void am_vcomp_isr(void);
    128          extern void am_ioslave_ios_isr(void);
    129          extern void am_ioslave_acc_isr(void);
    130          extern void am_iomaster0_isr(void);
    131          extern void am_iomaster1_isr(void);
    132          extern void am_iomaster2_isr(void);
    133          extern void am_iomaster3_isr(void);
    134          extern void am_iomaster4_isr(void);
    135          extern void am_iomaster5_isr(void);
    136          extern void am_ble_isr(void);
    137          extern void am_gpio_isr(void);
    138          extern void am_ctimer_isr(void);
    139          extern void am_uart_isr(void);
    140          extern void am_uart1_isr(void);
    141          extern void am_scard_isr(void);
    142          extern void am_adc_isr(void);
    143          extern void am_pdm0_isr(void);
    144          extern void am_mspi0_isr(void);
    145          extern void am_software0_isr(void);
    146          extern void am_stimer_isr(void);
    147          extern void am_stimer_cmpr0_isr(void);
    148          extern void am_stimer_cmpr1_isr(void);
    149          extern void am_stimer_cmpr2_isr(void);
    150          extern void am_stimer_cmpr3_isr(void);
    151          extern void am_stimer_cmpr4_isr(void);
    152          extern void am_stimer_cmpr5_isr(void);
    153          extern void am_stimer_cmpr6_isr(void);
    154          extern void am_stimer_cmpr7_isr(void);
    155          extern void am_flash_isr(void);
    156          extern void am_clkgen_isr(void);
    157          extern void am_mspi1_isr(void);
    158          extern void am_mspi2_isr(void);
    159          
    160          extern void am_default_isr(void);
    161          
    162          //*****************************************************************************
    163          //
    164          // The entry point for the application startup code.
    165          //
    166          //*****************************************************************************
    167          extern void __iar_program_start(void);
    168          
    169          //*****************************************************************************
    170          //
    171          // Reserve space for the system stack.
    172          //
    173          //*****************************************************************************
    174          static uint32_t pui32Stack[1024] @ ".stack";
    175          
    176          //*****************************************************************************
    177          //
    178          // A union that describes the entries of the vector table.  The union is needed
    179          // since the first entry is the stack pointer and the remainder are function
    180          // pointers.
    181          //
    182          //*****************************************************************************
    183          typedef union
    184          {
    185              void (*pfnHandler)(void);
    186              uint32_t ui32Ptr;
    187          }
    188          uVectorEntry;
    189          
    190          //*****************************************************************************
    191          //
    192          // The vector table.  Note that the proper constructs must be placed on this to
    193          // ensure that it ends up at physical address 0x0000.0000.
    194          //
    195          // Note: Aliasing and weakly exporting am_mpufault_isr, am_busfault_isr, and
    196          // am_usagefault_isr does not work if am_fault_isr is defined externally.
    197          // Therefore, we'll explicitly use am_fault_isr in the table for those vectors.
    198          //
    199          //*****************************************************************************
    200          __root const uVectorEntry __vector_table[] @ ".intvec" =
    201          {
    202              { .ui32Ptr = (uint32_t)pui32Stack + sizeof(pui32Stack) },
    203                                                      // The initial stack pointer
    204              Reset_Handler,                          // The reset handler
    205              NMI_Handler,                            // The NMI handler
    206              HardFault_Handler,                      // The hard fault handler
    207              MemManage_Handler,                      // The MemManage_Handler
    208              BusFault_Handler,                       // The BusFault_Handler
    209              UsageFault_Handler,                     // The UsageFault_Handler
    210              SecureFault_Handler,                    // The SecureFault_Handler
    211              0,                                      // Reserved
    212              0,                                      // Reserved
    213              0,                                      // Reserved
    214              SVC_Handler,                            // SVCall handler
    215              DebugMon_Handler,                       // Debug monitor handler
    216              0,                                      // Reserved
    217              PendSV_Handler,                         // The PendSV handler
    218              SysTick_Handler,                        // The SysTick handler
    219          
    220              //
    221              // Peripheral Interrupts
    222              //
    223              am_brownout_isr,                        //  0: Brownout (rstgen)
    224              am_watchdog_isr,                        //  1: Watchdog
    225              am_rtc_isr,                             //  2: RTC
    226              am_vcomp_isr,                           //  3: Voltage Comparator
    227              am_ioslave_ios_isr,                     //  4: I/O Slave general
    228              am_ioslave_acc_isr,                     //  5: I/O Slave access
    229              am_iomaster0_isr,                       //  6: I/O Master 0
    230              am_iomaster1_isr,                       //  7: I/O Master 1
    231              am_iomaster2_isr,                       //  8: I/O Master 2
    232              am_iomaster3_isr,                       //  9: I/O Master 3
    233              am_iomaster4_isr,                       // 10: I/O Master 4
    234              am_iomaster5_isr,                       // 11: I/O Master 5
    235              am_ble_isr,                             // 12: BLEIF
    236              am_gpio_isr,                            // 13: GPIO
    237              am_ctimer_isr,                          // 14: CTIMER
    238              am_uart_isr,                            // 15: UART0
    239              am_uart1_isr,                           // 16: UART1
    240              am_scard_isr,                           // 17: SCARD
    241              am_adc_isr,                             // 18: ADC
    242              am_pdm0_isr,                            // 19: PDM
    243              am_mspi0_isr,                           // 20: MSPI0
    244              am_software0_isr,                       // 21: SOFTWARE0
    245              am_stimer_isr,                          // 22: SYSTEM TIMER
    246              am_stimer_cmpr0_isr,                    // 23: SYSTEM TIMER COMPARE0
    247              am_stimer_cmpr1_isr,                    // 24: SYSTEM TIMER COMPARE1
    248              am_stimer_cmpr2_isr,                    // 25: SYSTEM TIMER COMPARE2
    249              am_stimer_cmpr3_isr,                    // 26: SYSTEM TIMER COMPARE3
    250              am_stimer_cmpr4_isr,                    // 27: SYSTEM TIMER COMPARE4
    251              am_stimer_cmpr5_isr,                    // 28: SYSTEM TIMER COMPARE5
    252              am_stimer_cmpr6_isr,                    // 29: SYSTEM TIMER COMPARE6
    253              am_stimer_cmpr7_isr,                    // 30: SYSTEM TIMER COMPARE7
    254              am_clkgen_isr,                          // 31: CLKGEN
    255              am_mspi1_isr,                           // 32: MSPI1
    256              am_mspi2_isr,                           // 33: MSPI2
    257          };
    258          
    259          //******************************************************************************
    260          //
    261          // Place code immediately following vector table.
    262          //
    263          //******************************************************************************
    264          //******************************************************************************
    265          //
    266          // The Patch table.
    267          //
    268          // The patch table should pad the vector table size to a total of 64 entries
    269          // (16 core + 48 periph) such that code begins at offset 0x100.
    270          //
    271          //******************************************************************************
    272          __root const uint32_t __Patchable[] @ ".patch" =
    273          {
    274              0,                                      // 34
    275              0,                                      // 35
    276              0,                                      // 36
    277              0,                                      // 37
    278              0,                                      // 38
    279              0,                                      // 39
    280              0,                                      // 40
    281              0,                                      // 41
    282              0,                                      // 42
    283              0,                                      // 43
    284              0,                                      // 44
    285              0,                                      // 45
    286              0,                                      // 46
    287              0,                                      // 47
    288          };
    289          
    290          //*****************************************************************************
    291          //
    292          // Note - The template for this function is originally found in IAR's module,
    293          //        low_level_init.c. As supplied by IAR, it is an empty function.
    294          //
    295          // This module contains the function `__low_level_init', a function
    296          // that is called before the `main' function of the program.  Normally
    297          // low-level initializations - such as setting the prefered interrupt
    298          // level or setting the watchdog - can be performed here.
    299          //
    300          // Note that this function is called before the data segments are
    301          // initialized, this means that this function cannot rely on the
    302          // values of global or static variables.
    303          //
    304          // When this function returns zero, the startup code will inhibit the
    305          // initialization of the data segments. The result is faster startup,
    306          // the drawback is that neither global nor static data will be
    307          // initialized.
    308          //
    309          // Copyright 1999-2017 IAR Systems AB.
    310          //
    311          // $Revision: 112610 $
    312          //
    313          //
    314          //
    315          //
    316          //*****************************************************************************
    317          #define AM_REGVAL(x)               (*((volatile uint32_t *)(x)))
    318          #define VTOR_ADDR                   0xE000ED08
    319          
    320          __interwork int __low_level_init(void)
    321          {
    322          
    323              AM_REGVAL(VTOR_ADDR) = (uint32_t)&__vector_table;
    324          
    325              /*==================================*/
    326              /* Choose if segment initialization */
    327              /* should be done or not.           */
    328              /* Return: 0 to omit seg_init       */
    329              /*         1 to run seg_init        */
    330              /*==================================*/
    331              return 1;
    332          }
    333          
    334          //*****************************************************************************
    335          //
    336          // This is the code that gets called when the processor first starts execution
    337          // following a reset event.  Only the absolutely necessary set is performed,
    338          // after which the application supplied entry() routine is called.
    339          //
    340          //*****************************************************************************
    341          void
    342          Reset_Handler(void)
    343          {
    344              //
    345              // Call the application's entry point.
    346              //
    347              __iar_program_start();
    348          }
    349          
    350          //*****************************************************************************
    351          //
    352          // This is the code that gets called when the processor receives a NMI.  This
    353          // simply enters an infinite loop, preserving the system state for examination
    354          // by a debugger.
    355          //
    356          //*****************************************************************************
    357          __weak void
    358          NMI_Handler(void)
    359          {
    360              //
    361              // Enter an infinite loop.
    362              //
    363              while(1)
    364              {
    365              }
    366          }
    367          
    368          //*****************************************************************************
    369          //
    370          // This is the code that gets called when the processor receives a fault
    371          // interrupt.  This simply enters an infinite loop, preserving the system state
    372          // for examination by a debugger.
    373          //
    374          //*****************************************************************************
    375          __weak void
    376          HardFault_Handler(void)
    377          {
    378              //
    379              // Enter an infinite loop.
    380              //
    381              while(1)
    382              {
    383              }
    384          }
    385          
    386          //*****************************************************************************
    387          //
    388          // This is the code that gets called when the processor receives an unexpected
    389          // interrupt.  This simply enters an infinite loop, preserving the system state
    390          // for examination by a debugger.
    391          //
    392          //*****************************************************************************
    393          static void
    394          am_default_isr(void)
    395          {
    396              //
    397              // Go into an infinite loop.
    398              //
    399              while(1)
    400              {
    401              }
    402          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   BusFault_Handler
       0   DebugMon_Handler
       0   HardFault_Handler
       0   MemManage_Handler
       0   NMI_Handler
       0   PendSV_Handler
       0   Reset_Handler
         0   -> __iar_program_start
       0   SVC_Handler
       0   SecureFault_Handler
       0   SysTick_Handler
       0   UsageFault_Handler
       0   __low_level_init
       0   am_adc_isr
       0   am_ble_isr
       0   am_brownout_isr
       0   am_clkgen_isr
       0   am_ctimer_isr
       0   am_default_isr
       0   am_gpio_isr
       0   am_iomaster0_isr
       0   am_iomaster1_isr
       0   am_iomaster2_isr
       0   am_iomaster3_isr
       0   am_iomaster4_isr
       0   am_iomaster5_isr
       0   am_ioslave_acc_isr
       0   am_ioslave_ios_isr
       0   am_mspi0_isr
       0   am_mspi1_isr
       0   am_mspi2_isr
       0   am_pdm0_isr
       0   am_rtc_isr
       0   am_scard_isr
       0   am_software0_isr
       0   am_stimer_cmpr0_isr
       0   am_stimer_cmpr1_isr
       0   am_stimer_cmpr2_isr
       0   am_stimer_cmpr3_isr
       0   am_stimer_cmpr4_isr
       0   am_stimer_cmpr5_isr
       0   am_stimer_cmpr6_isr
       0   am_stimer_cmpr7_isr
       0   am_stimer_isr
       0   am_uart1_isr
       0   am_uart_isr
       0   am_vcomp_isr
       0   am_watchdog_isr


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
       4  ??DataTable0_1
       2  NMI_Handler
       4  Reset_Handler
       2  SecureFault_Handler
          MemManage_Handler
          BusFault_Handler
          UsageFault_Handler
          HardFault_Handler
      56  __Patchable
      10  __low_level_init
     200  __vector_table
       2  am_clkgen_isr
          am_flash_isr
          am_mspi1_isr
          am_stimer_cmpr6_isr
          am_default_isr
          am_stimer_cmpr7_isr
          am_mspi2_isr
          am_brownout_isr
          am_vcomp_isr
          am_ioslave_ios_isr
          am_iomaster0_isr
          PendSV_Handler
          SVC_Handler
          am_iomaster1_isr
          am_watchdog_isr
          am_ioslave_acc_isr
          am_iomaster2_isr
          am_rtc_isr
          am_iomaster4_isr
          SysTick_Handler
          DebugMon_Handler
          am_iomaster3_isr
          am_ble_isr
          am_stimer_isr
          am_stimer_cmpr0_isr
          am_stimer_cmpr1_isr
          am_stimer_cmpr4_isr
          am_mspi0_isr
          am_stimer_cmpr2_isr
          am_scard_isr
          am_stimer_cmpr5_isr
          am_adc_isr
          am_software0_isr
          am_gpio_isr
          am_stimer_cmpr3_isr
          am_uart1_isr
          am_uart_isr
          am_pdm0_isr
          am_iomaster5_isr
          am_ctimer_isr
   4'096  pui32Stack

 
   200 bytes in section .intvec
    56 bytes in section .patch
 4'096 bytes in section .stack
    28 bytes in section .text
 
    24 bytes of CODE  memory (+ 4 bytes shared)
   256 bytes of CONST memory
 4'096 bytes of DATA  memory

Errors: none
Warnings: none
