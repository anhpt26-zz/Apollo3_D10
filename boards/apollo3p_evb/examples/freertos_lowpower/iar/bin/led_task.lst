###############################################################################
#
# IAR ANSI C/C++ Compiler V8.50.6.265/W32 for ARM         07/Jul/2021  16:12:34
# Copyright 1999-2020 IAR Systems AB.
#
#    Cpu mode                        
#    Endian                       =  little
#    Source file                  =
#        X:\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_lowpower\src\led_task.c
#    Command line                 =
#        -f C:\Users\ADMINI~1\AppData\Local\Temp\EWC455.tmp
#        (X:\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_lowpower\src\led_task.c
#        -D iar -D AM_PART_APOLLO3P -D AM_DEBUG_PRINTF -D AM_FREERTOS -D
#        AM_PACKAGE_BGA -D AM_UTIL_FAULTISR_PRINT -lcN
#        X:\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_lowpower\iar\bin
#        --diag_suppress Pa050 -o
#        X:\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_lowpower\iar\bin
#        --debug --endian=little --cpu=Cortex-M4 --no_path_in_file_macros -e
#        --fpu=VFPv4_sp --dlib_config "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.4\arm\inc\c\DLib_Config_Normal.h" -I
#        X:\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_lowpower\iar\..\..\..\..\..\third_party\FreeRTOSv10.1.1\Source\portable\IAR\AMapollo2\\
#        -I
#        X:\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_lowpower\iar\..\src\\
#        -I
#        X:\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_lowpower\iar\..\..\..\..\..\\
#        -I
#        X:\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_lowpower\iar\..\..\..\..\..\CMSIS\ARM\Include\\
#        -I
#        X:\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_lowpower\iar\..\..\..\..\..\CMSIS\AmbiqMicro\Include\\
#        -I
#        X:\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_lowpower\iar\..\..\..\bsp\\
#        -I
#        X:\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_lowpower\iar\..\..\..\..\..\mcu\apollo3p\\
#        -I
#        X:\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_lowpower\iar\..\..\..\..\..\devices\\
#        -I
#        X:\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_lowpower\iar\..\..\..\..\..\utils\\
#        -I
#        X:\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_lowpower\iar\..\..\..\..\..\third_party\FreeRTOSv10.1.1\Source\include\\
#        -Ohs --no_size_constraints)
#    Locale                       =  C
#    List file                    =
#        X:\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_lowpower\iar\bin\led_task.lst
#    Object file                  =
#        X:\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_lowpower\iar\bin\led_task.o
#    Runtime model:                  
#      __SystemLibrary            =  DLib
#      __dlib_full_locale_support =  0
#      __dlib_version             =  6
#
###############################################################################

X:\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_lowpower\src\led_task.c
      1          //*****************************************************************************
      2          //
      3          //! @file led_task.c
      4          //!
      5          //! @brief Task to handle LED operation.
      6          //!
      7          //*****************************************************************************
      8          
      9          //*****************************************************************************
     10          //
     11          // Copyright (c) 2020, Ambiq Micro, Inc.
     12          // All rights reserved.
     13          //
     14          // Redistribution and use in source and binary forms, with or without
     15          // modification, are permitted provided that the following conditions are met:
     16          //
     17          // 1. Redistributions of source code must retain the above copyright notice,
     18          // this list of conditions and the following disclaimer.
     19          //
     20          // 2. Redistributions in binary form must reproduce the above copyright
     21          // notice, this list of conditions and the following disclaimer in the
     22          // documentation and/or other materials provided with the distribution.
     23          //
     24          // 3. Neither the name of the copyright holder nor the names of its
     25          // contributors may be used to endorse or promote products derived from this
     26          // software without specific prior written permission.
     27          //
     28          // Third party software included in this distribution is subject to the
     29          // additional license terms as defined in the /docs/licenses directory.
     30          //
     31          // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     32          // AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     33          // IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
     34          // ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
     35          // LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
     36          // CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
     37          // SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
     38          // INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
     39          // CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
     40          // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
     41          // POSSIBILITY OF SUCH DAMAGE.
     42          //
     43          // This is part of revision 2.5.1 of the AmbiqSuite Development Package.
     44          //
     45          //*****************************************************************************
     46          
     47          //*****************************************************************************
     48          //
     49          // Global includes for this project.
     50          //
     51          //*****************************************************************************
     52          #include "freertos_lowpower.h"
     53          
     54          //*****************************************************************************
     55          //
     56          // LED task handle.
     57          //
     58          //*****************************************************************************
     59          TaskHandle_t led_task_handle;
     60          //*****************************************************************************
     61          //
     62          // Handle for LED-related events.
     63          //
     64          //*****************************************************************************
     65          EventGroupHandle_t xLedEventHandle;
     66          
     67          
     68          //*****************************************************************************
     69          //
     70          // Interrupt handler for the GPIO pins.
     71          //
     72          //*****************************************************************************
     73          void
     74          am_gpio_isr(void)
     75          {
     76              //
     77              // Read and clear the GPIO interrupt status.
     78              //
     79          #if defined(AM_PART_APOLLO3P)
     80              AM_HAL_GPIO_MASKCREATE(GpioIntStatusMask);
     81          
     82              am_hal_gpio_interrupt_status_get(false, pGpioIntStatusMask);
     83              am_hal_gpio_interrupt_clear(pGpioIntStatusMask);
     84              am_hal_gpio_interrupt_service(pGpioIntStatusMask);
     85          #elif defined(AM_PART_APOLLO3)
     86              uint64_t ui64Status;
     87          
     88              am_hal_gpio_interrupt_status_get(false, &ui64Status);
     89              am_hal_gpio_interrupt_clear(ui64Status);
     90              am_hal_gpio_interrupt_service(ui64Status);
     91          #else
     92              #error Unknown device.
     93          #endif
     94          }
     95          
     96          //*****************************************************************************
     97          //
     98          // Interrupt handler for the Buttons
     99          //
    100          //*****************************************************************************
    101          void
    102          button_handler(uint32_t buttonId)
    103          {
    104              BaseType_t xHigherPriorityTaskWoken, xResult;
    105              //
    106              // Send an event to the main LED task
    107              //
    108              xHigherPriorityTaskWoken = pdFALSE;
    109          
    110              xResult = xEventGroupSetBitsFromISR(xLedEventHandle, (1 << buttonId),
    111                                                  &xHigherPriorityTaskWoken);
    112          
    113              //
    114              // If the LED task is higher-priority than the context we're currently
    115              // running from, we should yield now and run the radio task.
    116              //
    117              if (xResult != pdFAIL)
    118              {
    119                  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
    120              }
    121          }
    122          
    123          void
    124          button0_handler(void)
    125          {
    126              uint32_t count;
    127              uint32_t val;
    128          
    129              //
    130              // Debounce for 20 ms.
    131              // We're triggered for rising edge - so we expect a consistent HIGH here
    132              //
    133              for (count = 0; count < 10; count++)
    134              {
    135                  am_hal_gpio_state_read(AM_BSP_GPIO_BUTTON0,  AM_HAL_GPIO_INPUT_READ, &val);
    136                  if (!val)
    137                  {
    138                      return; // State not high...must be result of debounce
    139                  }
    140                  am_util_delay_ms(2);
    141              }
    142          
    143              button_handler(0);
    144          }
    145          
    146          void
    147          button1_handler(void)
    148          {
    149              uint32_t count;
    150              uint32_t val;
    151          
    152              //
    153              // Debounce for 20 ms.
    154              // We're triggered for rising edge - so we expect a consistent HIGH here
    155              //
    156              for (count = 0; count < 10; count++)
    157              {
    158                  am_hal_gpio_state_read(AM_BSP_GPIO_BUTTON1,  AM_HAL_GPIO_INPUT_READ, &val);
    159                  if (!val)
    160                  {
    161                      return; // State not high...must be result of debounce
    162                  }
    163                  am_util_delay_ms(2);
    164              }
    165          
    166              button_handler(1);
    167          }
    168          
    169          void
    170          button2_handler(void)
    171          {
    172              uint32_t count;
    173              uint32_t val;
    174          
    175              //
    176              // Debounce for 20 ms.
    177              // We're triggered for rising edge - so we expect a consistent HIGH here
    178              //
    179              for (count = 0; count < 10; count++)
    180              {
    181                  am_hal_gpio_state_read(AM_BSP_GPIO_BUTTON2,  AM_HAL_GPIO_INPUT_READ, &val);
    182                  if (!val)
    183                  {
    184                      return; // State not high...must be result of debounce
    185                  }
    186                  am_util_delay_ms(2);
    187              }
    188          
    189              button_handler(2);
    190          }
    191          
    192          //*****************************************************************************
    193          //
    194          // Perform initial setup for the LED task.
    195          //
    196          //*****************************************************************************
    197          void
    198          LedTaskSetup(void)
    199          {
    200              am_util_debug_printf("LEDTask: setup\r\n");
    201          
    202              //
    203              // Create an event handle for our wake-up events.
    204              //
    205              xLedEventHandle = xEventGroupCreate();
    206          
    207              //
    208              // Make sure we actually allocated space for the events we need.
    209              //
    210              while (xLedEventHandle == NULL);
    211          
    212              // Initialize the LEDs
    213              am_devices_led_array_init(am_bsp_psLEDs, AM_BSP_NUM_LEDS);
    214              am_devices_led_off(am_bsp_psLEDs, 0);
    215              am_devices_led_off(am_bsp_psLEDs, 1);
    216              am_devices_led_off(am_bsp_psLEDs, 2);
    217              am_devices_led_off(am_bsp_psLEDs, 3);
    218              am_devices_led_off(am_bsp_psLEDs, 4);
    219              NVIC_SetPriority(GPIO_IRQn, NVIC_configMAX_SYSCALL_INTERRUPT_PRIORITY);
    220              //
    221              // Register interrupt handler for button presses
    222              //
    223              am_hal_gpio_interrupt_register(AM_BSP_GPIO_BUTTON0, button0_handler);
    224              am_hal_gpio_interrupt_register(AM_BSP_GPIO_BUTTON1, button1_handler);
    225              am_hal_gpio_interrupt_register(AM_BSP_GPIO_BUTTON2, button2_handler);
    226          
    227              am_hal_gpio_pinconfig(AM_BSP_GPIO_BUTTON0, g_AM_BSP_GPIO_BUTTON0);
    228              am_hal_gpio_pinconfig(AM_BSP_GPIO_BUTTON1, g_AM_BSP_GPIO_BUTTON1);
    229              am_hal_gpio_pinconfig(AM_BSP_GPIO_BUTTON2, g_AM_BSP_GPIO_BUTTON2);
    230          
    231              //
    232              // Clear the GPIO Interrupt (write to clear).
    233              //
    234              AM_HAL_GPIO_MASKCREATE(GpioIntMask0);
    235              AM_HAL_GPIO_MASKCREATE(GpioIntMask1);
    236              AM_HAL_GPIO_MASKCREATE(GpioIntMask2);
    237              am_hal_gpio_interrupt_clear(AM_HAL_GPIO_MASKBIT(pGpioIntMask0, AM_BSP_GPIO_BUTTON0));
    238              am_hal_gpio_interrupt_clear(AM_HAL_GPIO_MASKBIT(pGpioIntMask1, AM_BSP_GPIO_BUTTON1));
    239              am_hal_gpio_interrupt_clear(AM_HAL_GPIO_MASKBIT(pGpioIntMask2, AM_BSP_GPIO_BUTTON2));
    240          
    241              //
    242              // Enable the GPIO/button interrupt.
    243              //
    244              am_hal_gpio_interrupt_enable(AM_HAL_GPIO_MASKBIT(pGpioIntMask0, AM_BSP_GPIO_BUTTON0));
    245              am_hal_gpio_interrupt_enable(AM_HAL_GPIO_MASKBIT(pGpioIntMask1, AM_BSP_GPIO_BUTTON1));
    246              am_hal_gpio_interrupt_enable(AM_HAL_GPIO_MASKBIT(pGpioIntMask2, AM_BSP_GPIO_BUTTON2));
    247              NVIC_EnableIRQ(GPIO_IRQn);
    248          
    249              //
    250              // Enable interrupts to the core.
    251              //
    252              am_hal_interrupt_master_enable();
    253          }
    254          
    255          //*****************************************************************************
    256          //
    257          // Short Description.
    258          //
    259          //*****************************************************************************
    260          void
    261          LedTask(void *pvParameters)
    262          {
    263              uint32_t bitSet;
    264          
    265              while (1)
    266              {
    267                  //
    268                  // Wait for an event to be posted to the LED Event Handle.
    269                  //
    270                  bitSet = xEventGroupWaitBits(xLedEventHandle, 0x7, pdTRUE,
    271                                      pdFALSE, portMAX_DELAY);
    272                  if (bitSet != 0)
    273                  {
    274                      // Button Press Event received
    275                      // Toggle respective LED(s)
    276                      if (bitSet & (1 << 0))
    277                      {
    278                          am_devices_led_toggle(am_bsp_psLEDs, 0);
    279                      }
    280                      if (bitSet & (1 << 1))
    281                      {
    282                          am_devices_led_toggle(am_bsp_psLEDs, 1);
    283                      }
    284                      if (bitSet & (1 << 2))
    285                      {
    286                          am_devices_led_toggle(am_bsp_psLEDs, 2);
    287                      }
    288                  }
    289              }
    290          }
    291          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   LedTask
        24   -> am_devices_led_toggle
        24   -> xEventGroupWaitBits
      56   LedTaskSetup
        56   -> am_devices_led_array_init
        56   -> am_devices_led_off
        56   -> am_hal_gpio_interrupt_clear
        56   -> am_hal_gpio_interrupt_enable
        56   -> am_hal_gpio_interrupt_register
        56   -> am_hal_gpio_pinconfig
        56   -> am_hal_interrupt_master_enable
        56   -> am_util_stdio_printf
        56   -> xEventGroupCreate
      16   am_gpio_isr
        16   -> am_hal_gpio_interrupt_clear
        16   -> am_hal_gpio_interrupt_service
        16   -> am_hal_gpio_interrupt_status_get
      16   button0_handler
        16   -> am_hal_gpio_state_read
        16   -> am_util_delay_ms
        16   -> xTimerPendFunctionCallFromISR
      16   button1_handler
        16   -> am_hal_gpio_state_read
        16   -> am_util_delay_ms
        16   -> xTimerPendFunctionCallFromISR
      16   button2_handler
        16   -> am_hal_gpio_state_read
        16   -> am_util_delay_ms
        16   -> xTimerPendFunctionCallFromISR
      16   button_handler
        16   -> xTimerPendFunctionCallFromISR


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_10
       4  ??DataTable7_2
       4  ??DataTable7_3
       4  ??DataTable7_4
       4  ??DataTable7_5
       4  ??DataTable7_6
       4  ??DataTable7_7
       4  ??DataTable7_8
       4  ??DataTable7_9
      20  ?_0
      68  LedTask
     228  LedTaskSetup
      34  am_gpio_isr
     272  button0_handler
     266  button1_handler
     266  button2_handler
      64  button_handler
       4  led_task_handle
       4  xLedEventHandle

 
     8 bytes in section .bss
 1'262 bytes in section .text
 
 1'262 bytes of CODE memory
     8 bytes of DATA memory

Errors: none
Warnings: none
