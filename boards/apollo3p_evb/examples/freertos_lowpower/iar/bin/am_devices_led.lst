###############################################################################
#
# IAR ANSI C/C++ Compiler V8.50.6.265/W32 for ARM         07/Jul/2021  16:12:29
# Copyright 1999-2020 IAR Systems AB.
#
#    Cpu mode             
#    Endian            =  little
#    Source file       =  X:\Documents\Apollo3\A3_SDK\devices\am_devices_led.c
#    Command line      =
#        -f C:\Users\ADMINI~1\AppData\Local\Temp\EWB1E0.tmp
#        (X:\Documents\Apollo3\A3_SDK\devices\am_devices_led.c -D iar -D
#        AM_PART_APOLLO3P -D AM_DEBUG_PRINTF -D AM_FREERTOS -D AM_PACKAGE_BGA
#        -D AM_UTIL_FAULTISR_PRINT -lcN
#        X:\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_lowpower\iar\bin
#        --diag_suppress Pa050 -o
#        X:\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_lowpower\iar\bin
#        --debug --endian=little --cpu=Cortex-M4 --no_path_in_file_macros -e
#        --fpu=VFPv4_sp --dlib_config "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.4\arm\inc\c\DLib_Config_Normal.h" -I
#        X:\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_lowpower\iar\..\..\..\..\..\third_party\FreeRTOSv10.1.1\Source\portable\IAR\AMapollo2\\
#        -I
#        X:\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_lowpower\iar\..\src\\
#        -I
#        X:\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_lowpower\iar\..\..\..\..\..\\
#        -I
#        X:\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_lowpower\iar\..\..\..\..\..\CMSIS\ARM\Include\\
#        -I
#        X:\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_lowpower\iar\..\..\..\..\..\CMSIS\AmbiqMicro\Include\\
#        -I
#        X:\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_lowpower\iar\..\..\..\bsp\\
#        -I
#        X:\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_lowpower\iar\..\..\..\..\..\mcu\apollo3p\\
#        -I
#        X:\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_lowpower\iar\..\..\..\..\..\devices\\
#        -I
#        X:\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_lowpower\iar\..\..\..\..\..\utils\\
#        -I
#        X:\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_lowpower\iar\..\..\..\..\..\third_party\FreeRTOSv10.1.1\Source\include\\
#        -Ohs --no_size_constraints)
#    Locale            =  C
#    List file         =
#        X:\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_lowpower\iar\bin\am_devices_led.lst
#    Object file       =
#        X:\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_lowpower\iar\bin\am_devices_led.o
#    Runtime model:       
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#
###############################################################################

X:\Documents\Apollo3\A3_SDK\devices\am_devices_led.c
      1          //*****************************************************************************
      2          //
      3          //! @file am_devices_led.c
      4          //!
      5          //! @brief Functions for controlling an array of LEDs
      6          //!
      7          //! @addtogroup devices External Device Control Library
      8          //! @addtogroup LED SPI Device Control for programmable LEDs.
      9          //! @ingroup devices
     10          //! @{
     11          //
     12          //*****************************************************************************
     13          
     14          //*****************************************************************************
     15          //
     16          // Copyright (c) 2020, Ambiq Micro, Inc.
     17          // All rights reserved.
     18          //
     19          // Redistribution and use in source and binary forms, with or without
     20          // modification, are permitted provided that the following conditions are met:
     21          //
     22          // 1. Redistributions of source code must retain the above copyright notice,
     23          // this list of conditions and the following disclaimer.
     24          //
     25          // 2. Redistributions in binary form must reproduce the above copyright
     26          // notice, this list of conditions and the following disclaimer in the
     27          // documentation and/or other materials provided with the distribution.
     28          //
     29          // 3. Neither the name of the copyright holder nor the names of its
     30          // contributors may be used to endorse or promote products derived from this
     31          // software without specific prior written permission.
     32          //
     33          // Third party software included in this distribution is subject to the
     34          // additional license terms as defined in the /docs/licenses directory.
     35          //
     36          // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     37          // AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     38          // IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
     39          // ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
     40          // LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
     41          // CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
     42          // SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
     43          // INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
     44          // CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
     45          // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
     46          // POSSIBILITY OF SUCH DAMAGE.
     47          //
     48          // This is part of revision 2.5.1 of the AmbiqSuite Development Package.
     49          //
     50          //*****************************************************************************
     51          
     52          #include <stdint.h>
     53          #include <stdbool.h>
     54          #include "am_mcu_apollo.h"
     55          #include "am_devices_led.h"
     56          
     57          //
     58          // Define a somewhat arbitrary maximum number of LEDs.  No board is actually
     59          // expected to have this many LEDs, the value is used for parameter validation.
     60          //
     61          #define MAX_LEDS        31
     62          
     63          //*****************************************************************************
     64          //
     65          //! @brief Configures the necessary pins for an array of LEDs
     66          //!
     67          //! @param psLED is a pointer to an LED structure.
     68          //!
     69          //! This function configures a GPIO to drive an LED in a low-power way.
     70          //!
     71          //! @return None.
     72          //
     73          //*****************************************************************************
     74          void
     75          am_devices_led_init(am_devices_led_t *psLED)
     76          {
     77              if ( (psLED == NULL)    ||
     78                   (psLED->ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
     79              {
     80                  return;
     81              }
     82          
     83          #if defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B)
     84              //
     85              // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
     86              //
     87              if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLED->ui32Polarity )
     88              {
     89                  //
     90                  // Configure the pin as a push-pull GPIO output.
     91                  //
     92                  am_hal_gpio_pinconfig(psLED->ui32GPIONumber, am_hal_gpio_pincfg_output);
     93          
     94                  //
     95                  // Disable the output driver, and set the output value to the LEDs "ON"
     96                  // state.  Note that for Apollo3 GPIOs in push-pull mode, the output
     97                  // enable, normally a tri-state control, instead functions as an enable
     98                  // for Fast GPIO. Its state does not matter on previous chips, so for
     99                  // normal GPIO usage on Apollo3, it must be disabled.
    100                  //
    101                  am_hal_gpio_state_write(psLED->ui32GPIONumber, AM_HAL_GPIO_OUTPUT_TRISTATE_DISABLE);
    102                  am_hal_gpio_state_write(psLED->ui32GPIONumber,
    103                                          psLED->ui32Polarity & AM_DEVICES_LED_POL_POLARITY_M ?
    104                                          AM_HAL_GPIO_OUTPUT_SET : AM_HAL_GPIO_OUTPUT_CLEAR);
    105              }
    106              else
    107              {
    108                  //
    109                  // Configure the pin as a tri-state GPIO.
    110                  //
    111                  am_hal_gpio_pinconfig(psLED->ui32GPIONumber, am_hal_gpio_pincfg_tristate);
    112          
    113                  //
    114                  // Disable the output driver, and set the output value to the LEDs "ON"
    115                  // state.
    116                  //
    117                  am_hal_gpio_state_write(psLED->ui32GPIONumber, AM_HAL_GPIO_OUTPUT_TRISTATE_DISABLE);
    118                  am_hal_gpio_state_write(psLED->ui32GPIONumber,
    119                                          psLED->ui32Polarity & AM_DEVICES_LED_POL_POLARITY_M ?
    120                                          AM_HAL_GPIO_OUTPUT_SET : AM_HAL_GPIO_OUTPUT_CLEAR);
    121              }
    122          #else
    123          #if AM_APOLLO3_GPIO
    124              //
    125              // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    126              //
    127              if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLED->ui32Polarity )
    128              {
    129                  //
    130                  // Configure the pin as a push-pull GPIO output.
    131                  //
    132                  am_hal_gpio_pinconfig(psLED->ui32GPIONumber, g_AM_HAL_GPIO_OUTPUT);
    133          
    134                  //
    135                  // Disable the output driver, and set the output value to the LEDs "ON"
    136                  // state.  Note that for Apollo3 GPIOs in push-pull mode, the output
    137                  // enable, normally a tri-state control, instead functions as an enable
    138                  // for Fast GPIO. Its state does not matter on previous chips, so for
    139                  // normal GPIO usage on Apollo3, it must be disabled.
    140                  //
    141                  am_hal_gpio_state_write(psLED->ui32GPIONumber, AM_HAL_GPIO_OUTPUT_TRISTATE_DISABLE);
    142                  am_hal_gpio_state_write(psLED->ui32GPIONumber,
    143                                          psLED->ui32Polarity & AM_DEVICES_LED_POL_POLARITY_M ?
    144                                          AM_HAL_GPIO_OUTPUT_SET : AM_HAL_GPIO_OUTPUT_CLEAR);
    145              }
    146              else
    147              {
    148                  //
    149                  // Configure the pin as a tri-state GPIO.
    150                  //
    151                  am_hal_gpio_pinconfig(psLED->ui32GPIONumber, g_AM_HAL_GPIO_TRISTATE);
    152          
    153                  //
    154                  // Disable the output driver, and set the output value to the LEDs "ON"
    155                  // state.
    156                  //
    157                  am_hal_gpio_state_write(psLED->ui32GPIONumber, AM_HAL_GPIO_OUTPUT_TRISTATE_DISABLE);
    158                  am_hal_gpio_state_write(psLED->ui32GPIONumber,
    159                                          psLED->ui32Polarity & AM_DEVICES_LED_POL_POLARITY_M ?
    160                                          AM_HAL_GPIO_OUTPUT_SET : AM_HAL_GPIO_OUTPUT_CLEAR);
    161              }
    162          #else // AM_APOLLO3_GPIO
    163              //
    164              // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    165              //
    166              if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLED->ui32Polarity )
    167              {
    168                  //
    169                  // Configure the pin as a push-pull GPIO output.
    170                  //
    171                  am_hal_gpio_pin_config(psLED->ui32GPIONumber, AM_HAL_GPIO_OUTPUT);
    172          
    173                  //
    174                  // Disable the output driver, and set the output value to the LEDs "ON"
    175                  // state.
    176                  //
    177                  am_hal_gpio_out_enable_bit_clear(psLED->ui32GPIONumber);
    178                  am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
    179                                              psLED->ui32Polarity &
    180                                              AM_DEVICES_LED_POL_POLARITY_M);
    181              }
    182              else
    183              {
    184                  //
    185                  // Configure the pin as a tri-state GPIO.
    186                  //
    187                  am_hal_gpio_pin_config(psLED->ui32GPIONumber, AM_HAL_GPIO_3STATE);
    188          
    189                  //
    190                  // Disable the output driver, and set the output value to the LEDs "ON"
    191                  // state.
    192                  //
    193                  am_hal_gpio_out_enable_bit_clear(psLED->ui32GPIONumber);
    194                  am_hal_gpio_out_bit_replace(psLED->ui32GPIONumber,
    195                                              psLED->ui32Polarity &
    196                                              AM_DEVICES_LED_POL_POLARITY_M );
    197              }
    198          #endif // AM_APOLLO3_GPIO
    199          #endif
    200          }
    201          
    202          //*****************************************************************************
    203          //
    204          //! @brief Disables an array of LEDs
    205          //!
    206          //! @param psLEDs is an array of LED structures.
    207          //! @param ui32NumLEDs is the total number of LEDs in the array.
    208          //!
    209          //! This function disables the GPIOs for an array of LEDs.
    210          //!
    211          //! @return None.
    212          //
    213          //*****************************************************************************
    214          void
    215          am_devices_led_array_disable(am_devices_led_t *psLEDs, uint32_t ui32NumLEDs)
    216          {
    217              if ( (psLEDs == NULL)                       ||
    218                   (ui32NumLEDs > MAX_LEDS) )
    219              {
    220                  return;
    221              }
    222          
    223              //
    224              // Loop through the list of LEDs, configuring each one individually.
    225              //
    226              for ( uint32_t i = 0; i < ui32NumLEDs; i++ )
    227              {
    228                  if ( psLEDs[i].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS )
    229                  {
    230                      continue;
    231                  }
    232          
    233          #if defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B)
    234                  am_hal_gpio_pinconfig((psLEDs + i)->ui32GPIONumber, am_hal_gpio_pincfg_disabled);
    235          #else
    236          #if AM_APOLLO3_GPIO
    237                  am_hal_gpio_pinconfig((psLEDs + i)->ui32GPIONumber, g_AM_HAL_GPIO_DISABLE);
    238          #else // AM_APOLLO3_GPIO
    239                  am_hal_gpio_pin_config((psLEDs + i)->ui32GPIONumber, AM_HAL_GPIO_DISABLE);
    240          #endif // AM_APOLLO3_GPIO
    241          #endif
    242              }
    243          }
    244          
    245          //*****************************************************************************
    246          //
    247          //! @brief Configures the necessary pins for an array of LEDs
    248          //!
    249          //! @param psLEDs is an array of LED structures.
    250          //! @param ui32NumLEDs is the total number of LEDs in the array.
    251          //!
    252          //! This function configures the GPIOs for an array of LEDs.
    253          //!
    254          //! @return None.
    255          //
    256          //*****************************************************************************
    257          void
    258          am_devices_led_array_init(am_devices_led_t *psLEDs, uint32_t ui32NumLEDs)
    259          {
    260              uint32_t i;
    261          
    262              if ( (psLEDs == NULL)                       ||
    263                   (ui32NumLEDs > MAX_LEDS) )
    264              {
    265                  return;
    266              }
    267          
    268              //
    269              // Loop through the list of LEDs, configuring each one individually.
    270              //
    271              for ( i = 0; i < ui32NumLEDs; i++ )
    272              {
    273                  am_devices_led_init(psLEDs + i);
    274              }
    275          }
    276          
    277          //*****************************************************************************
    278          //
    279          //! @brief Turns on the requested LED.
    280          //!
    281          //! @param psLEDs is an array of LED structures.
    282          //! @param ui32LEDNum is the LED number for the light to turn on.
    283          //!
    284          //! This function turns on a single LED.
    285          //!
    286          //! @return None.
    287          //
    288          //*****************************************************************************
    289          void
    290          am_devices_led_on(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
    291          {
    292              if ( (psLEDs == NULL)                       ||
    293                   (ui32LEDNum >= MAX_LEDS)               ||
    294                   (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    295              {
    296                  return;
    297              }
    298          
    299          #if defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B)
    300              //
    301              // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    302              //
    303              if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
    304              {
    305                  //
    306                  // Set the output to the correct state for the LED.
    307                  //
    308                  am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    309                                          psLEDs[ui32LEDNum].ui32Polarity & AM_DEVICES_LED_POL_POLARITY_M ?
    310                                          AM_HAL_GPIO_OUTPUT_SET : AM_HAL_GPIO_OUTPUT_CLEAR);
    311              }
    312              else
    313              {
    314                  //
    315                  // Turn on the output driver for the LED.
    316                  //
    317                  am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    318                                          AM_HAL_GPIO_OUTPUT_TRISTATE_ENABLE);
    319              }
    320          #else
    321          #if (1 == AM_APOLLO3_GPIO)
    322              //
    323              // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    324              //
    325              if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
    326              {
    327                  //
    328                  // Set the output to the correct state for the LED.
    329                  //
    330                  am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    331                                          psLEDs[ui32LEDNum].ui32Polarity & AM_DEVICES_LED_POL_POLARITY_M ?
    332                                          AM_HAL_GPIO_OUTPUT_SET : AM_HAL_GPIO_OUTPUT_CLEAR);
    333              }
    334              else
    335              {
    336                  //
    337                  // Turn on the output driver for the LED.
    338                  //
    339                  am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    340                                          AM_HAL_GPIO_OUTPUT_TRISTATE_ENABLE);
    341              }
    342          #else // AM_APOLLO3_GPIO
    343              //
    344              // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    345              //
    346              if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
    347              {
    348                  //
    349                  // Set the output to the correct state for the LED.
    350                  //
    351                  am_hal_gpio_out_bit_replace(psLEDs[ui32LEDNum].ui32GPIONumber,
    352                                              psLEDs[ui32LEDNum].ui32Polarity &
    353                                              AM_DEVICES_LED_POL_POLARITY_M );
    354              }
    355              else
    356              {
    357                  //
    358                  // Turn on the output driver for the LED.
    359                  //
    360                  am_hal_gpio_out_enable_bit_set(psLEDs[ui32LEDNum].ui32GPIONumber);
    361              }
    362          #endif // AM_APOLLO3_GPIO
    363          #endif
    364          }
    365          
    366          //*****************************************************************************
    367          //
    368          //! @brief Turns off the requested LED.
    369          //!
    370          //! @param psLEDs is an array of LED structures.
    371          //! @param ui32LEDNum is the LED number for the light to turn off.
    372          //!
    373          //! This function turns off a single LED.
    374          //!
    375          //! @return None.
    376          //
    377          //*****************************************************************************
    378          void
    379          am_devices_led_off(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
    380          {
    381              if ( (psLEDs == NULL)                       ||
    382                   (ui32LEDNum >= MAX_LEDS)               ||
    383                   (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    384              {
    385                  return;
    386              }
    387          
    388          #if defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B)
    389              //
    390              // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    391              //
    392              if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
    393              {
    394                  //
    395                  // Set the output to the correct state for the LED.
    396                  //
    397                  am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    398                                          psLEDs[ui32LEDNum].ui32Polarity & AM_DEVICES_LED_POL_POLARITY_M ?
    399                                          AM_HAL_GPIO_OUTPUT_CLEAR : AM_HAL_GPIO_OUTPUT_SET);
    400              }
    401              else
    402              {
    403                  //
    404                  // Turn off the output driver for the LED.
    405                  //
    406                  am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    407                                          AM_HAL_GPIO_OUTPUT_TRISTATE_DISABLE);
    408              }
    409          #else
    410          #if (1 == AM_APOLLO3_GPIO)
    411              //
    412              // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    413              //
    414              if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
    415              {
    416                  //
    417                  // Set the output to the correct state for the LED.
    418                  //
    419                  am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    420                                          psLEDs[ui32LEDNum].ui32Polarity & AM_DEVICES_LED_POL_POLARITY_M ?
    421                                          AM_HAL_GPIO_OUTPUT_CLEAR : AM_HAL_GPIO_OUTPUT_SET);
    422              }
    423              else
    424              {
    425                  //
    426                  // Turn off the output driver for the LED.
    427                  //
    428                  am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    429                                          AM_HAL_GPIO_OUTPUT_TRISTATE_DISABLE);
    430              }
    431          #else // AM_APOLLO3_GPIO
    432              //
    433              // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    434              //
    435              if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
    436              {
    437                  //
    438                  // Set the output to the correct state for the LED.
    439                  //
    440                  am_hal_gpio_out_bit_replace(psLEDs[ui32LEDNum].ui32GPIONumber,
    441                                              !(psLEDs[ui32LEDNum].ui32Polarity &
    442                                                AM_DEVICES_LED_POL_POLARITY_M) );
    443              }
    444              else
    445              {
    446                  //
    447                  // Turn off the output driver for the LED.
    448                  //
    449                  am_hal_gpio_out_enable_bit_clear(psLEDs[ui32LEDNum].ui32GPIONumber);
    450              }
    451          #endif // AM_APOLLO3_GPIO
    452          #endif
    453          }
    454          
    455          //*****************************************************************************
    456          //
    457          //! @brief Toggles the requested LED.
    458          //!
    459          //! @param psLEDs is an array of LED structures.
    460          //! @param ui32LEDNum is the LED number for the light to toggle.
    461          //!
    462          //! This function toggles a single LED.
    463          //!
    464          //! @return None.
    465          //
    466          //*****************************************************************************
    467          void
    468          am_devices_led_toggle(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
    469          {
    470              if ( (psLEDs == NULL)                       ||
    471                   (ui32LEDNum >= MAX_LEDS)               ||
    472                   (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    473              {
    474                  return;
    475              }
    476          
    477          #if defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B)
    478              //
    479              // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    480              //
    481              if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
    482              {
    483                  am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    484                                          AM_HAL_GPIO_OUTPUT_TOGGLE);
    485              }
    486              else
    487              {
    488                  uint32_t ui32Ret, ui32Value;
    489          
    490                  //
    491                  // Check to see if the LED pin is enabled.
    492                  //
    493                  ui32Ret = am_hal_gpio_state_read(psLEDs[ui32LEDNum].ui32GPIONumber,
    494                                                   AM_HAL_GPIO_ENABLE_READ, &ui32Value);
    495          
    496                  if ( ui32Ret == AM_HAL_STATUS_SUCCESS )
    497                  {
    498                      if ( ui32Value )
    499                      {
    500                          //
    501                          // If it was enabled, turn if off.
    502                          //
    503                          am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    504                                                  AM_HAL_GPIO_OUTPUT_TRISTATE_DISABLE);
    505                      }
    506                      else
    507                      {
    508                          //
    509                          // If it was not enabled, turn it on.
    510                          //
    511                          am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    512                                                  AM_HAL_GPIO_OUTPUT_TRISTATE_ENABLE);
    513                      }
    514                  }
    515              }
    516          #else
    517          #if (1 == AM_APOLLO3_GPIO)
    518              //
    519              // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    520              //
    521              if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
    522              {
    523                  am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    524                                          AM_HAL_GPIO_OUTPUT_TOGGLE);
    525              }
    526              else
    527              {
    528                  uint32_t ui32Ret, ui32Value;
    529          
    530                  //
    531                  // Check to see if the LED pin is enabled.
    532                  //
    533                  ui32Ret = am_hal_gpio_state_read(psLEDs[ui32LEDNum].ui32GPIONumber,
    534                                                   AM_HAL_GPIO_ENABLE_READ, &ui32Value);
    535          
    536                  if ( ui32Ret == AM_HAL_STATUS_SUCCESS )
    537                  {
    538                      if ( ui32Value )
    539                      {
    540                          //
    541                          // If it was enabled, turn if off.
    542                          //
    543                          am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    544                                                  AM_HAL_GPIO_OUTPUT_TRISTATE_DISABLE);
    545                      }
    546                      else
    547                      {
    548                          //
    549                          // If it was not enabled, turn it on.
    550                          //
    551                          am_hal_gpio_state_write(psLEDs[ui32LEDNum].ui32GPIONumber,
    552                                                  AM_HAL_GPIO_OUTPUT_TRISTATE_ENABLE);
    553                      }
    554                  }
    555              }
    556          #else // AM_APOLLO3_GPIO
    557              //
    558              // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    559              //
    560              if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
    561              {
    562                  am_hal_gpio_out_bit_toggle(psLEDs[ui32LEDNum].ui32GPIONumber);
    563              }
    564              else
    565              {
    566                  //
    567                  // Check to see if the LED pin is enabled.
    568                  //
    569                  if ( am_hal_gpio_out_enable_bit_get(psLEDs[ui32LEDNum].ui32GPIONumber) )
    570                  {
    571                      //
    572                      // If it was enabled, turn if off.
    573                      //
    574                      am_hal_gpio_out_enable_bit_clear(psLEDs[ui32LEDNum].ui32GPIONumber);
    575                  }
    576                  else
    577                  {
    578                      //
    579                      // If it was not enabled, turn if on.
    580                      //
    581                      am_hal_gpio_out_enable_bit_set(psLEDs[ui32LEDNum].ui32GPIONumber);
    582                  }
    583              }
    584          #endif // AM_APOLLO3_GPIO
    585          #endif
    586          }
    587          
    588          //*****************************************************************************
    589          //
    590          //! @brief Gets the state of the requested LED.
    591          //!
    592          //! @param psLEDs is an array of LED structures.
    593          //! @param ui32LEDNum is the LED to check.
    594          //!
    595          //! This function checks the state of a single LED.
    596          //!
    597          //! @return true if the LED is on.
    598          //
    599          //*****************************************************************************
    600          bool
    601          am_devices_led_get(am_devices_led_t *psLEDs, uint32_t ui32LEDNum)
    602          {
    603              if ( (psLEDs == NULL)                       ||
    604                   (ui32LEDNum >= MAX_LEDS)               ||
    605                   (psLEDs[ui32LEDNum].ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS) )
    606              {
    607                  return false;   // No error return, so return as off
    608              }
    609          
    610          #if defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B)
    611              uint32_t ui32Ret, ui32Value;
    612              am_hal_gpio_read_type_e eReadType;
    613          
    614              eReadType = AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity ?
    615                          AM_HAL_GPIO_OUTPUT_READ : AM_HAL_GPIO_ENABLE_READ;
    616          
    617              ui32Ret = am_hal_gpio_state_read(psLEDs[ui32LEDNum].ui32GPIONumber,
    618                                               eReadType, &ui32Value);
    619          
    620              if ( ui32Ret == AM_HAL_STATUS_SUCCESS )
    621              {
    622                  return (bool)ui32Value;
    623              }
    624              else
    625              {
    626                  return false;
    627              }
    628          #else
    629          #if (1 == AM_APOLLO3_GPIO)
    630              uint32_t ui32Ret, ui32Value;
    631              am_hal_gpio_read_type_e eReadType;
    632          
    633              eReadType = AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity ?
    634                          AM_HAL_GPIO_OUTPUT_READ : AM_HAL_GPIO_ENABLE_READ;
    635          
    636              ui32Ret = am_hal_gpio_state_read(psLEDs[ui32LEDNum].ui32GPIONumber,
    637                                               eReadType, &ui32Value);
    638          
    639              if ( ui32Ret == AM_HAL_STATUS_SUCCESS )
    640              {
    641                  return (bool)ui32Value;
    642              }
    643              else
    644              {
    645                  return false;
    646              }
    647          #else // AM_APOLLO3_GPIO
    648              //
    649              // Handle Direct Drive Versus 3-State (with pull-up or no buffer).
    650              //
    651              if ( AM_DEVICES_LED_POL_DIRECT_DRIVE_M & psLEDs[ui32LEDNum].ui32Polarity )
    652              {
    653                  //
    654                  // Mask to the GPIO bit position for this GPIO number.
    655                  //
    656                  uint64_t ui64Mask = ((uint64_t)0x01l) << psLEDs[ui32LEDNum].ui32GPIONumber;
    657          
    658                  //
    659                  // Extract the state of this bit and return it.
    660                  //
    661                  return !!(am_hal_gpio_out_read() & ui64Mask);
    662              }
    663              else
    664              {
    665                  return am_hal_gpio_out_enable_bit_get(psLEDs[ui32LEDNum].ui32GPIONumber);
    666              }
    667          #endif // AM_APOLLO3_GPIO
    668          #endif
    669          }
    670          
    671          //*****************************************************************************
    672          //
    673          //! @brief Display a binary value using LEDs.
    674          //!
    675          //! @param psLEDs is an array of LED structures.
    676          //! @param ui32NumLEDs is the number of LEDs in the array.
    677          //! @param ui32Value is the value to display on the LEDs.
    678          //!
    679          //! This function displays a value in binary across an array of LEDs.
    680          //!
    681          //! @return true if the LED is on.
    682          //
    683          //*****************************************************************************
    684          void
    685          am_devices_led_array_out(am_devices_led_t *psLEDs, uint32_t ui32NumLEDs,
    686                                   uint32_t ui32Value)
    687          {
    688              uint32_t i;
    689          
    690              for ( i = 0; i < ui32NumLEDs; i++ )
    691              {
    692                  if ( ui32Value & (1 << i) )
    693                  {
    694                      am_devices_led_on(psLEDs, i);
    695                  }
    696                  else
    697                  {
    698                      am_devices_led_off(psLEDs, i);
    699                  }
    700              }
    701          }
    702          //*****************************************************************************
    703          //
    704          // End Doxygen group.
    705          //! @}
    706          //
    707          //*****************************************************************************

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   am_devices_led_array_disable
        16   -> am_hal_gpio_pinconfig
      24   am_devices_led_array_init
        24   -> am_hal_gpio_pinconfig
        24   -> am_hal_gpio_state_write
      24   am_devices_led_array_out
        24   -> am_hal_gpio_state_write
       8   am_devices_led_get
         8   -> am_hal_gpio_state_read
       8   am_devices_led_init
         8   -> am_hal_gpio_pinconfig
         0   -> am_hal_gpio_state_write
         8   -> am_hal_gpio_state_write
       0   am_devices_led_off
         0   -> am_hal_gpio_state_write
       0   am_devices_led_on
         0   -> am_hal_gpio_state_write
      16   am_devices_led_toggle
        16   -> am_hal_gpio_state_read
        16   -> am_hal_gpio_state_write


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
      36  am_devices_led_array_disable
      72  am_devices_led_array_init
      96  am_devices_led_array_out
      62  am_devices_led_get
      56  am_devices_led_init
      42  am_devices_led_off
      38  am_devices_led_on
      68  am_devices_led_toggle

 
 482 bytes in section .text
 
 482 bytes of CODE memory

Errors: none
Warnings: none
