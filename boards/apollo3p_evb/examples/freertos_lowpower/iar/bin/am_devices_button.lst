###############################################################################
#
# IAR ANSI C/C++ Compiler V8.50.6.265/W32 for ARM         07/Jul/2021  16:12:29
# Copyright 1999-2020 IAR Systems AB.
#
#    Cpu mode             
#    Endian            =  little
#    Source file       =
#        X:\Documents\Apollo3\A3_SDK\devices\am_devices_button.c
#    Command line      =
#        -f C:\Users\ADMINI~1\AppData\Local\Temp\EWB1DF.tmp
#        (X:\Documents\Apollo3\A3_SDK\devices\am_devices_button.c -D iar -D
#        AM_PART_APOLLO3P -D AM_DEBUG_PRINTF -D AM_FREERTOS -D AM_PACKAGE_BGA
#        -D AM_UTIL_FAULTISR_PRINT -lcN
#        X:\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_lowpower\iar\bin
#        --diag_suppress Pa050 -o
#        X:\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_lowpower\iar\bin
#        --debug --endian=little --cpu=Cortex-M4 --no_path_in_file_macros -e
#        --fpu=VFPv4_sp --dlib_config "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.4\arm\inc\c\DLib_Config_Normal.h" -I
#        X:\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_lowpower\iar\..\..\..\..\..\third_party\FreeRTOSv10.1.1\Source\portable\IAR\AMapollo2\\
#        -I
#        X:\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_lowpower\iar\..\src\\
#        -I
#        X:\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_lowpower\iar\..\..\..\..\..\\
#        -I
#        X:\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_lowpower\iar\..\..\..\..\..\CMSIS\ARM\Include\\
#        -I
#        X:\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_lowpower\iar\..\..\..\..\..\CMSIS\AmbiqMicro\Include\\
#        -I
#        X:\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_lowpower\iar\..\..\..\bsp\\
#        -I
#        X:\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_lowpower\iar\..\..\..\..\..\mcu\apollo3p\\
#        -I
#        X:\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_lowpower\iar\..\..\..\..\..\devices\\
#        -I
#        X:\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_lowpower\iar\..\..\..\..\..\utils\\
#        -I
#        X:\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_lowpower\iar\..\..\..\..\..\third_party\FreeRTOSv10.1.1\Source\include\\
#        -Ohs --no_size_constraints)
#    Locale            =  C
#    List file         =
#        X:\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_lowpower\iar\bin\am_devices_button.lst
#    Object file       =
#        X:\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_lowpower\iar\bin\am_devices_button.o
#    Runtime model:       
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#
###############################################################################

X:\Documents\Apollo3\A3_SDK\devices\am_devices_button.c
      1          //*****************************************************************************
      2          //
      3          //! @file am_devices_button.c
      4          //!
      5          //! @brief Functions for controlling an array of LEDs
      6          //
      7          //*****************************************************************************
      8          
      9          //*****************************************************************************
     10          //
     11          // Copyright (c) 2020, Ambiq Micro, Inc.
     12          // All rights reserved.
     13          //
     14          // Redistribution and use in source and binary forms, with or without
     15          // modification, are permitted provided that the following conditions are met:
     16          //
     17          // 1. Redistributions of source code must retain the above copyright notice,
     18          // this list of conditions and the following disclaimer.
     19          //
     20          // 2. Redistributions in binary form must reproduce the above copyright
     21          // notice, this list of conditions and the following disclaimer in the
     22          // documentation and/or other materials provided with the distribution.
     23          //
     24          // 3. Neither the name of the copyright holder nor the names of its
     25          // contributors may be used to endorse or promote products derived from this
     26          // software without specific prior written permission.
     27          //
     28          // Third party software included in this distribution is subject to the
     29          // additional license terms as defined in the /docs/licenses directory.
     30          //
     31          // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     32          // AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     33          // IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
     34          // ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
     35          // LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
     36          // CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
     37          // SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
     38          // INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
     39          // CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
     40          // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
     41          // POSSIBILITY OF SUCH DAMAGE.
     42          //
     43          // This is part of revision 2.5.1 of the AmbiqSuite Development Package.
     44          //
     45          //*****************************************************************************
     46          
     47          #include <stdint.h>
     48          #include <stdbool.h>
     49          #include "am_mcu_apollo.h"
     50          #include "am_devices_button.h"
     51          
     52          //*****************************************************************************
     53          //
     54          //! @brief Configures the necessary pins for an array of buttons.
     55          //!
     56          //! @param psButton is a pointer to a button structure.
     57          //!
     58          //! This function configures a GPIO to read a button in a low-power way.
     59          //!
     60          //! @return None.
     61          //
     62          //*****************************************************************************
     63          void
     64          am_devices_button_init(am_devices_button_t *psButton)
     65          {
     66              //
     67              // Disable the pin to save power.
     68              //
     69          #if defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B)
     70              am_hal_gpio_pinconfig(psButton->ui32GPIONumber, am_hal_gpio_pincfg_disabled);
     71          #else
     72          #if AM_APOLLO3_GPIO
     73              am_hal_gpio_pinconfig(psButton->ui32GPIONumber, g_AM_HAL_GPIO_DISABLE);
     74          #else // AM_APOLLO3_GPIO
     75              am_hal_gpio_pin_config(psButton->ui32GPIONumber, AM_HAL_PIN_DISABLE);
     76          #endif // AM_APOLLO3_GPIO
     77          #endif
     78          
     79              //
     80              // Initialize the state variables.
     81              //
     82              psButton->ui32Count = 0;
     83              psButton->bPressed = false;
     84              psButton->bChanged = false;
     85          }
     86          
     87          //*****************************************************************************
     88          //
     89          //! @brief Configures the necessary pins for an array of buttons.
     90          //!
     91          //! @param psButtons is an array of button structures.
     92          //! @param ui32NumButtons is the total number of buttons in the array.
     93          //!
     94          //! This function configures the GPIOs for an array of buttons.
     95          //!
     96          //! @return None.
     97          //
     98          //*****************************************************************************
     99          void
    100          am_devices_button_array_init(am_devices_button_t *psButtons,
    101                                       uint32_t ui32NumButtons)
    102          {
    103              uint32_t i;
    104          
    105              //
    106              // Loop through the list of buttons, configuring each one individually.
    107              //
    108              for ( i = 0; i < ui32NumButtons; i++ )
    109              {
    110                  am_devices_button_init(psButtons + i);
    111              }
    112          }
    113          
    114          //*****************************************************************************
    115          //
    116          //! @brief Configures the necessary pins for an array of buttons.
    117          //!
    118          //! @param psButtons is an array of button structures.
    119          //! @param ui32NumButtons is the total number of buttons in the array.
    120          //!
    121          //! This function configures the GPIOs for an array of buttons.
    122          //!
    123          //! @return None.
    124          //
    125          //*****************************************************************************
    126          void
    127          am_devices_button_tick(am_devices_button_t *psButton)
    128          {
    129              uint32_t ui32PinState;
    130              bool bRawButtonPressed;
    131          
    132              //
    133              // Enable the button pin.
    134              //
    135          #if defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B)
    136              am_hal_gpio_pinconfig(psButton->ui32GPIONumber, am_hal_gpio_pincfg_input);
    137          #else
    138          #if AM_APOLLO3_GPIO
    139              am_hal_gpio_pinconfig(psButton->ui32GPIONumber, g_AM_HAL_GPIO_INPUT);
    140          #else // AM_APOLLO3_GPIO
    141              am_hal_gpio_pin_config(psButton->ui32GPIONumber, AM_HAL_PIN_INPUT);
    142          #endif // AM_APOLLO3_GPIO
    143          #endif
    144              //
    145              // Read the pin state. If the pin is in its normal (unpressed) state, set
    146              // its "state" counter to zero.
    147              //
    148          #if defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B)
    149              am_hal_gpio_state_read(psButton->ui32GPIONumber, AM_HAL_GPIO_INPUT_READ, &ui32PinState);
    150          #else
    151          #if (1 == AM_APOLLO3_GPIO)
    152              am_hal_gpio_state_read(psButton->ui32GPIONumber, AM_HAL_GPIO_INPUT_READ, &ui32PinState);
    153          #else // AM_APOLLO3_GPIO
    154              ui32PinState = am_hal_gpio_input_bit_read(psButton->ui32GPIONumber);
    155          #endif // AM_APOLLO3_GPIO
    156          #endif
    157          
    158              //
    159              // Check to see if the button is "pressed" according to our GPIO reading.
    160              //
    161              bRawButtonPressed = (ui32PinState != psButton->ui32Polarity);
    162          
    163              //
    164              // Is this button state different from the last saved state?
    165              //
    166              if ( bRawButtonPressed != psButton->bPressed )
    167              {
    168                  //
    169                  // If so, increase the debounce count.
    170                  //
    171                  psButton->ui32Count++;
    172              }
    173              else
    174              {
    175                  //
    176                  // Otherwise, set the count back to zero.
    177                  //
    178                  psButton->ui32Count = 0;
    179              }
    180          
    181              //
    182              // If we hit the button debounce delay, record a button press to the
    183              // structure, and reset the count.
    184              //
    185              if ( psButton->ui32Count >= AM_DEVICES_BUTTON_DEBOUNCE_DELAY )
    186              {
    187                  psButton->bPressed = bRawButtonPressed;
    188                  psButton->bChanged = true;
    189                  psButton->ui32Count = 0;
    190              }
    191              else
    192              {
    193                  //
    194                  // If we didn't just record a press/release event, update the structure
    195                  // to say that the current state isn't new.
    196                  //
    197                  psButton->bChanged = false;
    198              }
    199          
    200              //
    201              // Disable the button pin to save power.
    202              //
    203          #if defined(AM_PART_APOLLO4) || defined(AM_PART_APOLLO4B)
    204              am_hal_gpio_pinconfig(psButton->ui32GPIONumber, am_hal_gpio_pincfg_disabled);
    205          #else
    206          #if AM_APOLLO3_GPIO
    207              am_hal_gpio_pinconfig(psButton->ui32GPIONumber, g_AM_HAL_GPIO_DISABLE);
    208          #else // AM_APOLLO3_GPIO
    209              am_hal_gpio_pin_config(psButton->ui32GPIONumber, AM_HAL_PIN_DISABLE);
    210          #endif // AM_APOLLO3_GPIO
    211          #endif
    212          }
    213          
    214          //*****************************************************************************
    215          //
    216          //! @brief Configures the necessary pins for an array of buttons.
    217          //!
    218          //! @param psButtons is an array of button structures.
    219          //! @param ui32NumButtons is the total number of buttons in the array.
    220          //!
    221          //! This function configures the GPIOs for an array of buttons.
    222          //!
    223          //! @return None.
    224          //
    225          //*****************************************************************************
    226          void
    227          am_devices_button_array_tick(am_devices_button_t *psButtons,
    228                                       uint32_t ui32NumButtons)
    229          {
    230              uint32_t i;
    231          
    232              //
    233              // Run the "tick" function for each button in the list.
    234              //
    235              for ( i = 0; i < ui32NumButtons; i++ )
    236              {
    237                  am_devices_button_tick(psButtons + i);
    238              }
    239          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   am_devices_button_array_init
        16   -> am_hal_gpio_pinconfig
      24   am_devices_button_array_tick
        24   -> am_hal_gpio_pinconfig
        24   -> am_hal_gpio_state_read
       8   am_devices_button_init
         8   -> am_hal_gpio_pinconfig
      16   am_devices_button_tick
        16   -> am_hal_gpio_pinconfig
        16   -> am_hal_gpio_state_read


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
      34  am_devices_button_array_init
      98  am_devices_button_array_tick
      24  am_devices_button_init
      88  am_devices_button_tick

 
 252 bytes in section .text
 
 252 bytes of CODE memory

Errors: none
Warnings: none
