###############################################################################
#
# IAR ANSI C/C++ Compiler V8.50.6.265/W32 for ARM         08/Jul/2021  07:47:53
# Copyright 1999-2020 IAR Systems AB.
#
#    Cpu mode                        
#    Endian                       =  little
#    Source file                  =
#        \\Mac\Home\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_mspi_mspi_display\src\rtos.c
#    Command line                 =
#        -f C:\Users\ADMINI~1\AppData\Local\Temp\EW12CD.tmp
#        (\\Mac\Home\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_mspi_mspi_display\src\rtos.c
#        -D iar -D AM_UTIL_FAULTISR_PRINT -D AM_FREERTOS -D APS6404L -D
#        AM_DEBUG_PRINTF -D AM_PART_APOLLO3P -D AM_PACKAGE_BGA -lcN
#        \\Mac\Home\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_mspi_mspi_display\iar\bin
#        --diag_suppress Pa050 -o
#        \\Mac\Home\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_mspi_mspi_display\iar\bin
#        --debug --endian=little --cpu=Cortex-M4 --no_path_in_file_macros -e
#        --fpu=VFPv4_sp --dlib_config "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.4\arm\inc\c\DLib_Config_Normal.h" -I
#        \\Mac\Home\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_mspi_mspi_display\iar\..\..\..\..\..\mcu\apollo3p\\
#        -I
#        \\Mac\Home\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_mspi_mspi_display\iar\..\src\\
#        -I
#        \\Mac\Home\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_mspi_mspi_display\iar\..\..\..\..\..\third_party\FreeRTOSv10.1.1\Source\portable\IAR\AMapollo2\\
#        -I
#        \\Mac\Home\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_mspi_mspi_display\iar\..\..\..\..\..\CMSIS\AmbiqMicro\Include\\
#        -I
#        \\Mac\Home\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_mspi_mspi_display\iar\..\..\..\..\..\devices\\
#        -I
#        \\Mac\Home\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_mspi_mspi_display\iar\..\..\..\bsp\\
#        -I
#        \\Mac\Home\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_mspi_mspi_display\iar\..\..\..\..\..\third_party\FreeRTOSv10.1.1\Source\include\\
#        -I
#        \\Mac\Home\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_mspi_mspi_display\iar\..\..\..\..\..\\
#        -I
#        \\Mac\Home\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_mspi_mspi_display\iar\..\..\..\..\..\CMSIS\ARM\Include\\
#        -I
#        \\Mac\Home\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_mspi_mspi_display\iar\..\..\..\..\..\utils\\
#        -Ohs --no_size_constraints)
#    Locale                       =  C
#    List file                    =
#        \\Mac\Home\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_mspi_mspi_display\iar\bin\rtos.lst
#    Object file                  =
#        \\Mac\Home\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_mspi_mspi_display\iar\bin\rtos.o
#    Runtime model:                  
#      __SystemLibrary            =  DLib
#      __dlib_full_locale_support =  0
#      __dlib_version             =  6
#
###############################################################################

\\Mac\Home\Documents\Apollo3\A3_SDK\boards\apollo3p_evb\examples\freertos_mspi_mspi_display\src\rtos.c
      1          //*****************************************************************************
      2          //
      3          //! @file rtos.c
      4          //!
      5          //! @brief Essential functions to make the RTOS run correctly.
      6          //!
      7          //! These functions are required by the RTOS for ticking, sleeping, and basic
      8          //! error checking.
      9          //
     10          //*****************************************************************************
     11          
     12          //*****************************************************************************
     13          //
     14          // Copyright (c) 2020, Ambiq Micro, Inc.
     15          // All rights reserved.
     16          //
     17          // Redistribution and use in source and binary forms, with or without
     18          // modification, are permitted provided that the following conditions are met:
     19          //
     20          // 1. Redistributions of source code must retain the above copyright notice,
     21          // this list of conditions and the following disclaimer.
     22          //
     23          // 2. Redistributions in binary form must reproduce the above copyright
     24          // notice, this list of conditions and the following disclaimer in the
     25          // documentation and/or other materials provided with the distribution.
     26          //
     27          // 3. Neither the name of the copyright holder nor the names of its
     28          // contributors may be used to endorse or promote products derived from this
     29          // software without specific prior written permission.
     30          //
     31          // Third party software included in this distribution is subject to the
     32          // additional license terms as defined in the /docs/licenses directory.
     33          //
     34          // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     35          // AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     36          // IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
     37          // ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
     38          // LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
     39          // CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
     40          // SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
     41          // INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
     42          // CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
     43          // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
     44          // POSSIBILITY OF SUCH DAMAGE.
     45          //
     46          // This is part of revision 2.5.1 of the AmbiqSuite Development Package.
     47          //
     48          //*****************************************************************************
     49          
     50          #include <stdint.h>
     51          #include <stdbool.h>
     52          
     53          #include "am_mcu_apollo.h"
     54          #include "am_bsp.h"
     55          
     56          #include "FreeRTOS.h"
     57          #include "task.h"
     58          #include "queue.h"
     59          #include "portmacro.h"
     60          #include "portable.h"
     61          #include "freertos_mspi_mspi_display.h"
     62          
     63          //*****************************************************************************
     64          //
     65          // Task handle for the initial setup task.
     66          //
     67          //*****************************************************************************
     68          TaskHandle_t xSetupTask;
     69          
     70          //*****************************************************************************
     71          //
     72          // Interrupt handler for the CTIMER module.
     73          //
     74          //*****************************************************************************
     75          void
     76          am_ctimer_isr(void)
     77          {
     78              uint32_t ui32Status;
     79          
     80              //
     81              // Check the timer interrupt status.
     82              //
     83              ui32Status = am_hal_ctimer_int_status_get(false);
     84              am_hal_ctimer_int_clear(ui32Status);
     85          
     86              //
     87              // Run handlers for the various possible timer events.
     88              //
     89              am_hal_ctimer_int_service(ui32Status);
     90          }
     91          
     92          //*****************************************************************************
     93          //
     94          // Sleep function called from FreeRTOS IDLE task.
     95          // Do necessary application specific Power down operations here
     96          // Return 0 if this function also incorporates the WFI, else return value same
     97          // as idleTime
     98          //
     99          //*****************************************************************************
    100          uint32_t am_freertos_sleep(uint32_t idleTime)
    101          {
    102              am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
    103              return 0;
    104          }
    105          
    106          //*****************************************************************************
    107          //
    108          // Recovery function called from FreeRTOS IDLE task, after waking up from Sleep
    109          // Do necessary 'wakeup' operations here, e.g. to power up/enable peripherals etc.
    110          //
    111          //*****************************************************************************
    112          void am_freertos_wakeup(uint32_t idleTime)
    113          {
    114              return;
    115          }
    116          
    117          
    118          //*****************************************************************************
    119          //
    120          // FreeRTOS debugging functions.
    121          //
    122          //*****************************************************************************
    123          void
    124          vApplicationMallocFailedHook(void)
    125          {
    126              //
    127              // Called if a call to pvPortMalloc() fails because there is insufficient
    128              // free memory available in the FreeRTOS heap.  pvPortMalloc() is called
    129              // internally by FreeRTOS API functions that create tasks, queues, software
    130              // timers, and semaphores.  The size of the FreeRTOS heap is set by the
    131              // configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h.
    132              //
    133              while (1);
    134          }
    135          
    136          void
    137          vApplicationStackOverflowHook(TaskHandle_t pxTask, char *pcTaskName)
    138          {
    139              (void) pcTaskName;
    140              (void) pxTask;
    141          
    142              //
    143              // Run time stack overflow checking is performed if
    144              // configconfigCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
    145              // function is called if a stack overflow is detected.
    146              //
    147              while (1)
    148              {
    149                  __asm("BKPT #0\n") ; // Break into the debugger
    150              }
    151          }
    152          
    153          
    154          //*****************************************************************************
    155          //
    156          // High priority task to run immediately after the scheduler starts.
    157          //
    158          // This task is used for any global initialization that must occur after the
    159          // scheduler starts, but before any functional tasks are running. This can be
    160          // useful for enabling events, semaphores, and other global, RTOS-specific
    161          // features.
    162          //
    163          //*****************************************************************************
    164          void
    165          setup_task(void *pvParameters)
    166          {
    167              //
    168              // Print a debug message.
    169              //
    170              am_util_debug_printf("Running setup tasks...\r\n");
    171          
    172              //
    173              // Run setup functions.
    174              //
    175              MainTaskSetup();
    176              ComposeTaskSetup();
    177              RenderTaskSetup();
    178          
    179              //
    180              // Create the functional tasks
    181              //
    182              xTaskCreate(MainTask, "MainTask", 512, 0, 3, &main_task_handle);
    183              xTaskCreate(ComposeTask, "ComposeTask", 512, 0, 3, &compose_task_handle);
    184              xTaskCreate(RenderTask, "RenderTask", 512, 0, 3, &render_task_handle);
    185              //
    186              // The setup operations are complete, so suspend the setup task now.
    187              //
    188              vTaskSuspend(NULL);
    189          
    190              while (1);
    191          }
    192          
    193          //*****************************************************************************
    194          //
    195          // Initializes all tasks
    196          //
    197          //*****************************************************************************
    198          void
    199          run_tasks(void)
    200          {
    201              //
    202              // Set some interrupt priorities before we create tasks or start the scheduler.
    203              //
    204              // Note: Timer priority is handled by the FreeRTOS kernel, so we won't
    205              // touch it here.
    206              //
    207          
    208              //
    209              // Create essential tasks.
    210              //
    211              xTaskCreate(setup_task, "Setup", 512, 0, 3, &xSetupTask);
    212          
    213          
    214              //
    215              // Start the scheduler.
    216              //
    217              vTaskStartScheduler();
    218          }
    219          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   am_ctimer_isr
         8   -> am_hal_ctimer_int_clear
         0   -> am_hal_ctimer_int_service
         8   -> am_hal_ctimer_int_status_get
       8   am_freertos_sleep
         8   -> am_hal_sysctrl_sleep
       0   am_freertos_wakeup
      16   run_tasks
         0   -> vTaskStartScheduler
        16   -> xTaskCreate
      16   setup_task
        16   -> ComposeTaskSetup
        16   -> MainTaskSetup
        16   -> RenderTaskSetup
        16   -> am_util_stdio_printf
        16   -> vTaskSuspend
        16   -> xTaskCreate
       0   vApplicationMallocFailedHook
       0   vApplicationStackOverflowHook


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_2
       4  ??DataTable7_3
       4  ??DataTable7_4
       4  ??DataTable7_5
       4  ??DataTable7_6
       4  ??DataTable7_7
      28  ?_0
      12  ?_1
      12  ?_2
      12  ?_3
       8  ?_4
      24  am_ctimer_isr
      16  am_freertos_sleep
       2  am_freertos_wakeup
      38  run_tasks
     100  setup_task
       2  vApplicationMallocFailedHook
       4  vApplicationStackOverflowHook
       4  xSetupTask

 
   4 bytes in section .bss
 290 bytes in section .text
 
 290 bytes of CODE memory
   4 bytes of DATA memory

Errors: none
Warnings: none
